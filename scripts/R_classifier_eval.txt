str(iris)
set.seed(1234)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.7, 0.3))
trainData <- iris[ind==1,]
testData <- iris[ind==2,]
library(party)
myFormula <- Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width
iris_ctree <- ctree(myFormula, data=trainData)
table(predict(iris_ctree), trainData$Species)
testPred <- predict(iris_ctree, newdata = testData)
plot(iris_ctree, type="simple")
table(testPred, testData$Species)

data <- read.table("D:\\tcvr_dt_rf", header=TRUE, sep=",")

Decisian Tree

str(data)
set.seed(1234)
ind <- sample(2, nrow(data), replace=TRUE, prob=c(0.9, 0.1))
trainData <- data[ind==1,]
testData <- data[ind==2,]
library(party)
myFormula <- class ~ "where"+"is"+"the"+"least"+"occupied"+"garage"+"which"+"has"+"most"+"spots"+"available"+"garages"+"are"+"full"+"parking"+"at"+"f"+"i"+"u"+"empty"+"space"+"will"+"be"+"able"+"to"+"find"+"show"+"me"+"top"+"three"+"with"+"occupancy"+"availability"+"of"+"<garage>"+"can"+"get"+"park"+"in"+"does "+" have"+"left"+"out"+"rest"+"slot"+"how"+"many"+"there"+"any"+"free"+"position"+"room"+"for"+"what"+"should"+"may"+"tell"+"spot"+"best"+"place"+"recommend"+"a"+"suggest"+"recommendation"+"go"+"do"+"location"+"all"+"near"+"around"+"here"+"nearest"+"closest"+"having"+"my"+"area"+"am"+"current"+"<routenm>"+"bus"+"shuttle"+"buses"+"shuttles"+"route"+"path"+"from"+"<platform>"+"passing"+"through"+"give"+"highlight"+"on"+"map"+"line"+"pass"+"by"+"take"+"routes"+"station"+"gets"+"way"+"dose"+"run"+"stop"+"stations"+"stops"+"want"+"know"+"nearby"+"that"+"now"+"going"+"belongs"+"located"+"navigate"+"good"+"estimate"+"arrival"+"time"+"e"+"t"+"arrive"+"you"+"long"+"before"+"next"+"wait"+"it"+"until"+"comes"+"till"+"soon"+"come"+"when"+"coming"+"arriving"+"due"+"reach"+"leave"+"late"+"far"+"away"+"waiting"+"dynamic"+"catch"+"currently"
data_ctree <- ctree(myFormula, data=trainData)
table(predict(data_ctree), trainData$class)
testPred <- predict(data_ctree, newdata = testData)
table(testPred, testData$class)

library(randomForest)
rf <- randomForest(class ~ ., data=trainData, ntree=100, proximity=TRUE)
table(predict(rf, newdata=testData), trainData$class)
print(rf)
plot(rf)







